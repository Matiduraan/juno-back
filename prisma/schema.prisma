// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    Int      @id @default(autoincrement())
  email      String   @unique
  name       String?
  user_role  UserRole @default(PLANNER)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Layout    Layout[]
  Party     Party[]
  PartyHost PartyHost[]
}

model Layout {
  layout_id          Int        @id @default(autoincrement())
  layout_owner_id    Int
  layout_name        String
  layout_description String?
  layout_type        LayoutType
  created_at         DateTime   @default(now())
  updated_at         DateTime   @updatedAt

  layoutOwner User         @relation(fields: [layout_owner_id], references: [user_id])
  Party       Party[]
  LayoutItem  LayoutItem[]
}

model LayoutItem {
  layout_item_id         Int      @id @default(autoincrement())
  layout_id              Int
  layout_item_name       String
  layout_item_type       String
  layout_item_shape      String
  layout_item_position_x Float
  layout_item_position_y Float
  layout_item_rotation   Float
  layout_item_seat_count Int      @default(4)
  layout_item_radius     Float?
  layout_item_color      String?
  layout_item_size       Float?
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt

  Layout     Layout       @relation(fields: [layout_id], references: [layout_id])
  PartyGuest PartyGuest[]
}

model Party {
  party_id         Int      @id @default(autoincrement())
  party_name       String
  party_date       DateTime
  party_location   String
  party_start_time DateTime @db.Time()
  party_end_time   DateTime @db.Time()
  organizer_id     Int
  layout_id        Int
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  Organizer   User         @relation(fields: [organizer_id], references: [user_id])
  Layout      Layout       @relation(fields: [layout_id], references: [layout_id])
  PartyGuests PartyGuest[]
  PartyHosts  PartyHost[]
}

model PartyGuest {
  guest_id      Int         @id @default(autoincrement())
  party_id      Int
  guest_name    String
  guest_status  GuestStatus @default(PENDING)
  guest_email   String?
  guest_phone   String?
  guest_notes   String?
  guest_avatar  String?
  guest_seat_id Int?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  Party      Party       @relation(fields: [party_id], references: [party_id])
  Guest_seat LayoutItem? @relation(fields: [guest_seat_id], references: [layout_item_id])
}

model PartyHost {
  party_host_id Int      @id @default(autoincrement())
  party_id      Int
  host_id       Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  Party Party @relation(fields: [party_id], references: [party_id])
  Host  User  @relation(fields: [host_id], references: [user_id])
}

enum UserRole {
  PLANNER
  HOST
}

enum LayoutType {
  PARTY
  MODEL
}

enum GuestStatus {
  INVITED
  ACCEPTED
  DECLINED
  PENDING
}
